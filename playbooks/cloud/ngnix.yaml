- name: Configure Nginx for kaxtus.com
  hosts: kaxtus
  become: yes
  vars_files:
    - ../group_vars/all.yaml
  tags:
    - nginx

  pre_tasks:
    - name: Check if nginx.conf template exists
      ansible.builtin.stat:
        path: "../storage_meta/nginx.conf.j2"
      delegate_to: localhost
      register: nginx_template
      failed_when: not nginx_template.stat.exists

  tasks:
    - name: Create Docker network
      community.docker.docker_network:
        name: bridge_network
        state: present

    - name: Install Docker dependencies
      ansible.builtin.package:
        name:
          - "{{ docker_package }}"
          - python3-docker
        state: present
      vars:
        docker_package: "{{ 'docker.io' if ansible_os_family == 'Debian' else 'docker' }}"

    - name: Ensure Docker service is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes

    - name: Pull Nginx Docker image
      community.docker.docker_image:
        name: nginx:latest
        source: pull
        force_source: yes
      register: nginx_image

    - name: Create temporary directory for config validation
      ansible.builtin.tempfile:
        state: directory
        suffix: nginx_conf
      register: temp_config_dir

    - name: Render nginx.conf template
      ansible.builtin.template:
        src: "../storage_meta/nginx.conf.j2"
        dest: "{{ temp_config_dir.path }}/nginx.conf"
        mode: '0644'
      register: nginx_config

    - name: Copy validated config to final location
      ansible.builtin.copy:
        src: "{{ temp_config_dir.path }}/nginx.conf"
        dest: "/tmp/nginx.conf"
        mode: '0644'
        remote_src: yes
      when: nginx_config is success

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ temp_config_dir.path }}"
        state: absent

    - name: Stop and remove existing Nginx container
      community.docker.docker_container:
        name: nginx-container
        state: absent
        force_kill: yes
      when: nginx_config.changed or nginx_image.changed

    - name: Deploy Nginx container
      community.docker.docker_container:
        name: nginx-container
        image: nginx:latest
        state: started
        restart_policy: unless-stopped
        networks:
          - name: bridge_network
        ports:
          - "82:80"
        volumes:
          - "/tmp/nginx.conf:/etc/nginx/nginx.conf:ro"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:82/"]
          interval: 10s
          timeout: 5s
          retries: 3
        comparisons:
          '*': strict
      register: nginx_container

    - name: Wait for Nginx container to be healthy
      ansible.builtin.wait_for:
        timeout: 30
      when: nginx_container.changed

    - name: Verify Nginx is responding
      ansible.builtin.uri:
        url: "http://localhost:80"
        method: GET
        status_code: 200
      register: nginx_response
      retries: 3
      delay: 5
      until: nginx_response.status == 200

  handlers:
    - name: Reload Nginx configuration
      community.docker.docker_container_exec:
        container: nginx-container
        command: nginx -s reload
      when: nginx_container.state.Running
      listen: reload_nginx